#!/bin/sh
#
# tiny initramfs generation tool

msg() {
    # print message
    case "$1" in
        info)
            printf "info >> %s\n" "$2" >&2
            ;;
        warn)
            printf "warning >> %s\n" "$2" >&2
            printf "do you want to continue? press enter or ctrl+c to exit\n"
            read -r _
            ;;
        panic)
            printf "panic >> %s\n" "$2" >&2
            exit 1
            ;;
    esac
}

usage() {
    # TODO more options
    cat << EOF
usage: $0 [options]
    -o, --output <file>     output file
    -c, --config <file>     config file
    -m, --moddir <dir>      drivers directory
    -k, --kernel <ver>      kernel version
    -f, --files  <dir>      files directory
    -d, --debug   0|1       debug mode

EOF
}

parse_args() {
    while [ "$1" ]; do
        case "$1" in
            -o | --output)
                _initramfs="${2:?}"
                shift 2
                ;;
            -c | --config)
                _config="${2:?}"
                shift 2
                ;;
            -m | --moddir)
                _moddir="${2:?}"
                shift 2
                ;;
            -k | --kernel)
                _kernel="${2:?}"
                shift 2
                ;;
            -f | --files)
                _filesdir="${2:?}"
                shift 2
                ;;
            -d | --debug)
                _debug="${2:?}"
                shift 2
                ;;
            -h | --help)
                usage
                exit 0
                ;;
            *)
                printf "%s\n\n" "invalid option: '$1'"
                usage
                exit 1
                ;;
        esac
    done
}

parse_conf() {
    . "${_config:-./config}" ||
        msg panic "failed to parse config"

    kernel="${_kernel:-${kernel:-$(uname -r)}}"
    moddir="${_moddir:-${moddir:-/lib/modules}}"
    filesdir="${_filesdir:-./files}"
    debug="${_debug:-${debug:-0}}"
    initramfs="${_initramfs:-${initramfs:-./initramfs-${kernel}}}"
    modker="${moddir}/${kernel}"
}

create_workdir() {
    msg info "creating working directory"

    workdir="${XDG_CACHE_HOME:-${TMPDIR:-/tmp}}/initramfs.$$"
    mkdir -p "$workdir" ||
        msg panic "failed to create working directory"
}

remove_workdir() {
    msg info "removing working directory"

    rm -rf "$workdir"
}

install_requirements() {
    msg info "installing requirements"

    # install user specified binaries
    [ "$binaries"       ] &&
        for custom_binary in $binaries; do
            install_binary "$custom_binary"
        done

    # install util-linux binaries
    [ "$util_linux" = 1 ] &&
        for util_linux_binary in mount blkid; do
            install_binary "$util_linux_binary"
        done

    # install mandatory binaries
    for main_binary in busybox modprobe; do
        install_binary "$main_binary"
    done
}

create_structure() {
    msg info "creating directory structure"

    for dir in dev tmp var run etc usr/lib usr/bin mnt/root proc root sys; do
        mkdir -p "${workdir}/${dir}"
    done
}

create_symlinks() {
    msg info "creating symlinks"

    ln -s usr/lib "${workdir}/lib"
    ln -s usr/lib "${workdir}/lib64"
    ln -s usr/bin "${workdir}/bin"
    ln -s usr/bin "${workdir}/sbin"
    ln -s ../run  "${workdir}/var/run"
    ln -s bin     "${workdir}/usr/sbin"
    ln -s lib     "${workdir}/usr/lib64"
}

install_devmgr() {
    msg info "installing device manager"

    case "$devmgr" in
        udev)
            for udev_binary in udevd udevadm dmsetup; do
                install_binary "$udev_binary"
            done

            find /usr/lib/udev \
                ! -path "*rc_keymaps*" \
                ! -path "*hwdb.d*" \
                -type f |

                cpio -pd "$workdir" > /dev/null 2>&1 || msg panic "failed to install udev"
            ;;
        mdev)
            install -m644  "${filesdir}/mdev.conf"      "${workdir}/etc/mdev.conf"
            install -Dm755 "${filesdir}/storage-device" "${workdir}/lib/mdev/storage-device"
            ;;
        mdevd)
            for mdevd_binary in mdevd mdevd-coldplug; do
                install_binary "$mdevd_binary"
            done

            install -m644  "${filesdir}/mdev.conf"      "${workdir}/etc/mdev.conf"
            install -Dm755 "${filesdir}/storage-device" "${workdir}/lib/mdev/storage-device"
            ;;
        *)
            msg panic "devmgr option broken"
            ;;
    esac
}

install_lvm() {
    msg info "installing LVM"

    install_binary lvm

    [ "$hostonly" = 1 ] &&
        for lvm_driver in dm-thin-pool dm-multipath dm-snapshot dm-cache dm-log dm-mirror; do
            install_driver "$lvm_driver"
        done

    # install lvm config
    if [ "$lvm_conf" = 1 ]; then
        mkdir -p "${workdir}/etc/lvm"

        cp /etc/lvm/*.conf "${workdir}/etc/lvm" ||
            msg panic "failed to install LVM config"
    else
        mkdir -p "${workdir}/etc/lvm"

        cat << EOF > "${workdir}/etc/lvm/lvm.conf"
devices {
    # block discard support
    issue_discards = ${lvm_discard:-0}
}

global {
    # disable lvmetad
    use_lvmetad = 0
}
EOF
    fi
}

install_luks() {
    msg info "installing LUKS"

    install_binary cryptsetup

    [ "$hostonly" = 1 ] &&
        for luks_driver in aes dm-crypt sha256 sha512 wp512 ecb lrw xts twofish serpent; do
            install_driver "$luks_driver"
        done

    # avoid "locking directory missing" warning
    # message and libgcc_s.so.1 missing error
    # see https://bugs.archlinux.org/task/56771
    mkdir -p "${workdir}/run/cryptsetup"

    [ -e /usr/lib/libgcc_s.so.1 ] &&
        install_library /usr/lib/libgcc_s.so.1

    # copy luks header
    [ -f "$luks_header" ] && {
        install -m400 "$luks_header" "${workdir}/root/luks_header" ||
            msg panic "failed to copy LUKS header"

        luks_args="--header=/root/luks_header $luks_args"
    }

    # copy luks keyfile
    [ -f "$luks_keyfile" ] && {
        install -m400 "$luks_keyfile" "${workdir}/root/luks_keyfile" ||
            msg panic "failed to copy LUKS keyfile"

        luks_args="--key-file=/root/luks_keyfile $luks_args"
    }
}

install_driver() {
    driver="$1"

    modprobe -S "$kernel" -D "$driver" 2> /dev/null |

    while read -r full_driver; do

        # strip uneeded stuff
        full_driver="${full_driver##*builtin*}"
        full_driver="${full_driver##*net*}"
        full_driver="${full_driver#insmod }"

        # check empty
        [ "$full_driver" ] || continue

        # check if already installed
        [ -e "${workdir}${full_driver}" ] ||
            install -Dm644 "$full_driver" "${workdir}${full_driver}"
    done
}

install_hostonly_drivers() {
    msg info "installing hostonly drivers"

    [ "$root_type" ] ||
        msg panic "hostonly mode required root_type option to be configured"

    # perform autodetection of drivers via /sys
    find /sys -name modalias -exec sort -u {} + |

    while read -r alias_driver; do
        install_driver "$alias_driver"
    done

    # install root fs driver
    install_driver "$root_type"

    # install user specified drivers
    [ "$drivers" ] &&
        for custom_driver in $drivers; do
            install_driver "$custom_driver"
        done
}

install_all_drivers() {
    msg info "installing all drivers"

    find \
        "${modker}/kernel/arch" \
        "${modker}/kernel/crypto" \
        "${modker}/kernel/fs" \
        "${modker}/kernel/lib" \
        "${modker}/kernel/drivers/block" \
        "${modker}/kernel/drivers/ata" \
        "${modker}/kernel/drivers/md" \
        "${modker}/kernel/drivers/scsi" \
        "${modker}/kernel/drivers/usb/storage" \
        "${modker}/kernel/drivers/usb/host" \
        "${modker}/kernel/drivers/virtio" \
        -type f 2> /dev/null |

    while read -r path_driver; do

        # strip path and extension
        path_driver="${path_driver##*/}"
        path_driver="${path_driver%%.*}"

        install_driver "$path_driver"
    done
}

generate_depmod() {
    msg info "generating drivers list"

    cp "${modker}/modules.builtin" \
       "${modker}/modules.order" \
       "${workdir}${modker}"

    depmod -b "$workdir" "$kernel"
}

install_binary() {
    binary="$1"
    fullbin=$(command -v "$binary")
    workdirbin="${workdir}/usr/bin/"

    # check if binary exists
    [ "$fullbin" ] || msg panic "$binary doesn't exists"

    # check if binary already installed
    [ -e "${workdirbin}${fullbin##*/}" ] && return

    # install and strip binary
    install -s -m755 "$fullbin" "${workdirbin}${fullbin##*/}"

    # check static
    ldd "$fullbin" > /dev/null 2>&1 || return

    # exract paths to libraries
    ldd "$fullbin" |
        sed -nr 's,.* (/.*lib.*/.*.so.*) .*,\1,p;s,.*(/lib.*/ld.*.so.*) .*,\1,p' |

    while read -r library; do
        install_library "$library"
    done
}

install_library() {
    library="$1"
    namelib="${library##*/}"
    reallib="/usr/lib/$(readlink "$library")"
    fulllib=$(readlink -f "$library")
    workdirlib="${workdir}/usr/lib/"

    # check if library already installed
    [ -e "${workdirlib}${fulllib##*/}" ] &&
    [ -e "${workdirlib}${namelib}"     ] &&
        return

    # install symlinks if any
    [ -h "$library" ] && {

        # symlink may link to symlink
        [ -h "$reallib" ] &&
            cp -a "$reallib" "$workdirlib"

        cp -a "$library" "$workdirlib"
    }

    # install library
    install -s -m755 "$fulllib" "${workdirlib}${fulllib##*/}"
}

install_files() {
    msg info "installing files"

    cat << EOF > "${workdir}/config"
debug="$debug"
init="$init"
root="$root"
root_type="$root_type"
root_opts="$root_opts"
devmgr="$devmgr"
#drivers
lvm="$lvm"
lvm_name="$lvm_name"
lvm_group="$lvm_group"
#lvm_discard
lvm_args="$lvm_args"
luks="$luks"
luks_root="$luks_root"
luks_name="$luks_name"
#luks_header
#luks_keyfile
luks_discard="$luks_discard"
luks_args="$luks_args"
EOF

    install -m644 "${filesdir}/passwd" "${workdir}/etc/passwd"
    install -m644 "${filesdir}/group"  "${workdir}/etc/group"
    install -m755 "${filesdir}/init"   "${workdir}/init"
}

create_initramfs() {
    msg info "creating initramfs image"

    # TODO add uncompressed option
    # TODO remove grouping

    {
        (
            cd "$workdir"
            find . | cpio -oH newc | ${compress:-gzip -9}

        ) | tee "$initramfs"

    } > /dev/null 2>&1 ||
        msg panic "failed to generate initramfs image"
}

# check root
[ "$(id -u)" = 0 ] || msg panic "must be run as root"

parse_args "$@"
parse_conf

# remove workdir on exit or unexpected error
trap remove_workdir EXIT INT

[ "$debug" = 1 ] && {
    # debug shell commands
    set -x
    # don't remove anything
    trap - EXIT INT
}

create_workdir
create_structure
create_symlinks
install_requirements

if   [ -d "$moddir" ] && [ "$hostonly" = 1 ]; then
    install_hostonly_drivers
elif [ -d "$moddir" ]; then
    install_all_drivers
fi

generate_depmod
install_devmgr
[ "$lvm"  = 1 ] && install_lvm
[ "$luks" = 1 ] && install_luks
install_files
create_initramfs

msg info "done! check out $initramfs"
